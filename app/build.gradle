apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'composer'

android {
    compileSdkVersion androidVars.compileSdkVersion
    buildToolsVersion androidVars.buildTools

    defaultConfig {
        applicationId "com.antyzero.cardcheck"
        minSdkVersion androidVars.minSdkVersion
        targetSdkVersion androidVars.targetSdkVersion
        versionCode appVersionCode as Integer
        versionName appVersionName as String
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "long", "BUILD_DATE", "${System.currentTimeMillis()}L"
    }

    //noinspection GroovyAssignabilityCheck
    signingConfigs {

        debug {
            storeFile file('debug.keystore')
        }

        release {
            storeFile new File("" + System.getenv("KEYSTORE"))
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    //noinspection GroovyAssignabilityCheck
    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }

        release {
            if (System.getenv("KEYSTORE") != null) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // StringFormatInvalid - for some reason strings contain version string thats invalid
        disable 'InvalidPackage'
        abortOnError !rootProject.ext.ignoreFailures
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

play {
    jsonFile = new File("" + System.getenv("PLAY_JSON"))
    track = 'beta'
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:${libVersion.android.support.appCompat}"
    }
}

/**
 * Grant permission tasks for all variants
 */
android.applicationVariants.all { variant ->
    def applicationId = variant.applicationId
    def adb = android.getAdbExecutable().toString()
    def variantName = variant.name.capitalize()
    def grantPermissionTask = tasks.create("grant${variantName}Permissions") {
        doLast {
            "${adb} devices".execute().text.eachLine {
                if (it.endsWith("device")) {
                    def device = it.split()[0]
                    println "Granting permissions on devices ${device}"
                    "${adb} -s ${device} shell pm grant ${applicationId} android.permission.READ_EXTERNAL_STORAGE".execute()
                    "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                }
            }
        }
    }
}

/**
 * Setup some tasks dependencies
 */
tasks.whenTaskAdded { task ->
    project.android.applicationVariants.all { variant ->

        def variantName = variant.name.capitalize()

        // Permission before composer
        def composerTaskName = "test${variantName}Composer" as String
        if (task.name == composerTaskName) {
            def composerTask = tasks.findByName(composerTaskName)
            def grantPermissionTask = tasks.findByName("grant${variantName}Permissions")
            composerTask.dependsOn grantPermissionTask
        }

        // App install before permission
        def installTaskName = "install${variantName}" as String
        if (task.name == installTaskName) {
            def installTask = tasks.findByName(installTaskName)
            def grantPermissionTask = tasks.findByName("grant${variantName}Permissions")
            grantPermissionTask.dependsOn installTask
        }
    }

    // Disable lint checks
    if (task.name == "lint") {
        task.enabled = false
    }
}

/**
 * Copy Kotlin sources for unit tests
 */
afterEvaluate {
    android.buildTypes.all {
        def name = it.name

        def copyTask = project.task(type: Copy, "copyKotlin${name.capitalize()}UnitTestClasses") {
            from "build/tmp/kotlin-classes/${name}UnitTest"
            into "build/intermediates/classes/test/$name"
        }

        project.tasks.findByName("compile${name.capitalize()}UnitTestSources")?.finalizedBy copyTask
    }
}

dependencies {

    implementation project(':domain')
    implementation "com.android.support:appcompat-v7:${libVersion.android.support.appCompat}"
    implementation "com.android.support:design:${libVersion.android.support.appCompat}"
    implementation "com.android.support.constraint:constraint-layout:${libVersion.android.support.constraint}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.firebase:firebase-jobdispatcher-with-gcm-dep:${libVersion.firebase.jobdispatcher}"
    implementation("com.crashlytics.sdk.android:crashlytics:${libVersion.crashlytics}@aar") {
        transitive = true
    }

    //Rx dependencies
    implementation "io.reactivex.rxjava2:rxandroid:${libVersion.rx.android}"
    implementation "io.reactivex.rxjava2:rxjava:${libVersion.rx.java}"

    //Dagger 2 dependencies
    implementation "com.google.dagger:dagger:${libVersion.google.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libVersion.google.dagger}"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    testCompileOnly junit5EmbeddedRuntime()// For running tests inside Android Studio 3.x

    testImplementation junit5()
    testImplementation "com.google.truth:truth:${libVersion.test.truth}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    androidTestImplementation "com.android.support.test:runner:${libVersion.test.android.support}"
    androidTestImplementation "com.android.support.test:rules:${libVersion.test.android.support}"
    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:${libVersion.test.android.uiautomator}"
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}
